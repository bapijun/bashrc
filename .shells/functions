# Functions to aid git workflow
function ga(){
    git-add $1
}

function gc(){
    git commit -m "$*"
}

function revert(){
    git reset --hard $1
}

# Simplify apt-get search and install
function show ()
{
    apt-cache search $1
}

function giveme ()
{
    sudo apt-get install "$@"
}

# Useful unarchiver!
function extract () {
        if [ -f $1 ] ; then
                case $1 in
                        *.tar.bz2)        tar xjf $1                ;;
                            *.tar.xz)        tar xJf $1                ;
                        *.tar.gz)        tar xzf $1                ;;
                        *.bz2)                bunzip2 $1                ;;
                        *.rar)                rar x $1                ;;
                        *.gz)                gunzip $1                ;;
                        *.tar)                tar xf $1                ;;
                        *.tbz2)                tar xjf $1                ;;
                        *.tgz)                tar xzf $1                ;;
                        *.zip)                unzip $1                ;;
                        *.Z)                uncompress $1        ;;
                        *)                        echo "'$1' cannot be extracted via extract()" ;;
                esac
        else
                echo "'$1' is not a valid file"
        fi
}

function psg() {
        if [ ! -z $1 ] ; then
                echo "Grepping for processes matching $1..."
                ps aux | grep $1 
        else
                echo "!! Need name to grep for"
        fi
}

# Find, needs 'sudo apt-get install silversearcher-ag'
# Ignores sandbox environments, in this case, folder
# starting with chroot/
function f()
{
    ag --ignore chroot "$@"
}

# Because I am a lazy bum, and this is
# surpisingly helpful..
function up()
{
    for i in `seq 1 $1`;
    do
        cd ../
    done;
}

# Required for the prompt to show git status
function parse_git_dirty {
[[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}
function parse_git_branch {
git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[\1$(parse_git_dirty)]/"
}

## docker执行对应的参数
function dockere()
{
    docker exec -i -t $1 /bin/bash
}

## docker start and attach
function dockersa()
{
    docker start $1 && nvidia-docker attach $1
}

## docker执行对应的参数
function ndockere()
{
    nvidia-docker exec -i -t $1 /bin/bash
}

## docker start and attach
function ndockersa()
{
    nvidia-docker start $1 && nvidia-docker attach $1
}

## tar gz
function untargz()
{
    tar -zxf  $1 
}

## tar gz 解压缩
function targz()
{
    tar -zcf  $1 $2
}

function proxy() {
    systemctl restart clash
    export http_proxy=http://127.0.0.1:7890
    export https_proxy=$http_proxy
    export all_proxy=socks5://127.0.0.1:7890
    echo -e "proxy on!"
}
function unproxy(){ 
    systemctl stop clash
    unset http_proxy https_proxy
    unset all_proxy
    echo -e "proxy off"
}
